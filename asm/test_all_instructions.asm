# 综合测试多种指令: blt, sw, lw, lui

# 初始化寄存器
addi x1, x0, 0     # x1 = 0 (计数器)
addi x2, x0, 5     # x2 = 5 (循环次数)
lui x3, 0x100      # x3 = 0x1000000 (内存基址)

# 循环开始: 将1到5的数字存入内存
addi x1, x1, 1      # x1 += 1

# 计算存储地址: x3 + (x1-1)*4
addi x4, x1, -1     # x4 = x1 - 1
add x4, x4, x4      # x4 = 2*(x1-1)
add x4, x4, x4      # x4 = 4*(x1-1)
add x4, x3, x4      # x4 = x3 + 4*(x1-1) (当前存储地址)

# 存储当前计数值到内存
sw x1, 0(x4)        # M[x4] = x1

# 比较循环条件: 如果x1 < x2，则继续循环
blt x1, x2, -24     # 如果 x1 < x2，跳回循环开始

# 初始化用于计算和的寄存器
addi x5, x0, 0     # x5 = 0 (存储数字和)
addi x1, x0, 0     # x1 = 0 (重置计数器)

# 循环读取内存中的数字并求和
addi x1, x1, 1      # x1 += 1

# 计算加载地址: x3 + (x1-1)*4
addi x4, x1, -1     # x4 = x1 - 1
add x4, x4, x4      # x4 = 2*(x1-1)
add x4, x4, x4      # x4 = 4*(x1-1)
add x4, x3, x4      # x4 = x3 + 4*(x1-1) (当前加载地址)

# 从内存加载值
lw x6, 0(x4)        # x6 = M[x4]

# 累加到和中
add x5, x5, x6      # x5 += x6

# 比较循环条件: 如果x1 < x2，则继续循环
blt x1, x2, -24     # 如果 x1 < x2，跳回循环开始

# 结束程序，x5应该包含1到5的和: 15
halt 